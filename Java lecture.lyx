#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{listings}
%\usetheme{Warsaw}
% or ...
%\usetheme{Antibes}	% tree outline, neat
%\usetheme{JuanLesPins}	% like Antibes, with shading
%\usetheme{Bergen}	% outline on side
%\usetheme{Luebeck}	% like Warsaw, square sides
%\usetheme{Berkeley}	% interesting left bar outline
%\usetheme{Madrid}	% clean, nice.  7/12 page numbers
%\usetheme{Berlin}	% dots show slide number
%\usetheme{Malmoe}	% OK, plain, unshaded
%\usetheme{Boadilla}	% nice, white bg, no top bar
%\usetheme{Marburg}	% nice, outline on right
%\usetheme{boxes}	% ???
%\usetheme{Montpellier}	% tree outline on top, plainish white
%\usetheme{Copenhagen}	% like Warsaw
%\usetheme{PaloAlto}	% looks good
%\usetheme{Darmstadt}	% like Warsaw with circle outline
%\usetheme{Pittsburgh}
%\usetheme{default}
%\usetheme{Rochester}	% like boxy, unshaded warsaw
\usetheme{Dresden}	% circle outline on top
%\usetheme{Singapore}	% purple gradient top
%\usetheme{Frankfurt}	% like Warsaw with circle outline on top
%\usetheme{Szeged}
%\usetheme{Goettingen}	% light purple right bar outline
%\usetheme{Warsaw}
%\usetheme{Hannover}	% like Goett with bar on left
%\usetheme{compatibility}
%\usetheme{Ilmenau}

\setbeamercovered{transparent}
\usefonttheme[onlylarge]{structurebold}
% or whatever (possibly just delete it)

%\usecolortheme{seahorse}
%\usecolortheme{rose}

% seems to fix typewriter font in outline header:
\usepackage{ae,aecompl}

\usepackage{pgf}
\usepackage{graphicx}
\usepackage{xcolor}
\setbeamertemplate{navigation symbols}{} %no nav symbols
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title[Java in Real Life
\backslash
hspace{2em}
\backslash
insertframenumber/
\backslash
inserttotalframenumber]{Java in Real Life}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\begin_layout Plain Layout

	language=Java,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
small,
\end_layout

\begin_layout Plain Layout

	keywordstyle=
\backslash
color{blue}
\backslash
bfseries,
\end_layout

\begin_layout Plain Layout

	stringstyle=
\backslash
ttfamily,
\end_layout

\begin_layout Plain Layout

	showstringspaces=false} 
\end_layout

\end_inset


\end_layout

\begin_layout Author
Eugene Dzhurinsky
\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Benefits of encapsulation}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Keep code and data together.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Single point of modification.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

One class - one responsibility.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

Easy maintenance.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<5->
\end_layout

\end_inset

Unit tests.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
inheritwrong{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

class Engine {
\end_layout

\begin_layout Plain Layout

  protected int power;
\end_layout

\begin_layout Plain Layout

  protected int minRpm;
\end_layout

\begin_layout Plain Layout

  protected int maxRpm;
\end_layout

\begin_layout Plain Layout

  //getters/setters/constructor
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Vehicle extends Engine {
\end_layout

\begin_layout Plain Layout

  private int capacity;
\end_layout

\begin_layout Plain Layout

  private int volume;
\end_layout

\begin_layout Plain Layout

  // getters/setters/constructor
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Wrong class hierarchy}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
inheritwrong
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Prefer composition over inheritance.
 Is-a versus has-a principle.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Problems with having complex data hierarchy when modifying superclasses.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Tightly coupling children class with ancestor one.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

Hierarchy design bugs makes it hard to refactor.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

Keeping unnecessary data in children from ancestor.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<5->
\end_layout

\end_inset

Breaking incapsulation with protected field access.
 Ability to break contract of ancestor class in child class.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
inheritcorrect{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

class Engine {
\end_layout

\begin_layout Plain Layout

  protected int power;
\end_layout

\begin_layout Plain Layout

  protected int minRpm;
\end_layout

\begin_layout Plain Layout

  protected int maxRpm;
\end_layout

\begin_layout Plain Layout

  //getters/setters/constructor
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Vehicle {
\end_layout

\begin_layout Plain Layout

  private Engine engine;
\end_layout

\begin_layout Plain Layout

  private int capacity;
\end_layout

\begin_layout Plain Layout

  private int volume;
\end_layout

\begin_layout Plain Layout

  // getters/setters/constructor
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Better class hierarchy}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
inheritcorrect
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
adhocpoly{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

interface TaxCalculator {
\end_layout

\begin_layout Plain Layout

  Number calculate(int interest, int grossIncome);
\end_layout

\begin_layout Plain Layout

  Number calculate(double interest, int grossincome);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class CalculatorImpl implements TaxCalculator {
\end_layout

\begin_layout Plain Layout

  // method implementations
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Bank {
\end_layout

\begin_layout Plain Layout

  private TaxCalculator calculator = new CalculatorImpl();
\end_layout

\begin_layout Plain Layout

  public Number calculate(int grossIncome) {
\end_layout

\begin_layout Plain Layout

    int interest = getInterest(...);
\end_layout

\begin_layout Plain Layout

    return calculator.calculate(interest, grossIncome);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Ad-hoc polymorphism, method overloading.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
adhocpoly
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
subtypepoly{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

interface TaxCalculator {
\end_layout

\begin_layout Plain Layout

  Number calculate(int interest, int grossIncome);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class TaxCalculatorWithVAT implements TaxCalculator {
\end_layout

\begin_layout Plain Layout

  Integer calculate(int interest, int grossIncome) {...}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class TaxCalculatorNoVAT implements TaxCalculator {
\end_layout

\begin_layout Plain Layout

  Float calculate(int interest, int grossIncome) {...}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Bank {
\end_layout

\begin_layout Plain Layout

  private final TaxCalculator calculator;
\end_layout

\begin_layout Plain Layout

  public Bank(TaxCalculator calculator) { this.calculator = calculator; };
\end_layout

\begin_layout Plain Layout

  public Number calculate(int grossIncome) {
\end_layout

\begin_layout Plain Layout

    int interest = getInterest(...);
\end_layout

\begin_layout Plain Layout

    return calculator.calculate(interest, grossIncome);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Subtype polymorphism.
 Liskov substitution principle}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subtypepoly
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
parampoly{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

interface List<T> {
\end_layout

\begin_layout Plain Layout

  void append(T item);
\end_layout

\begin_layout Plain Layout

  void prepend(T item);
\end_layout

\begin_layout Plain Layout

  T removeFirst();
\end_layout

\begin_layout Plain Layout

  T removeLast();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ArrayList<E> implements List<E> {
\end_layout

\begin_layout Plain Layout

  private E[] items = new E[100];
\end_layout

\begin_layout Plain Layout

  private int currentIdx = 0;
\end_layout

\begin_layout Plain Layout

  public void append(E item) {...}
\end_layout

\begin_layout Plain Layout

  public void prepend(E item) {...}
\end_layout

\begin_layout Plain Layout

  E removeFirst() {...}
\end_layout

\begin_layout Plain Layout

  E removeLast() {...}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void main() {
\end_layout

\begin_layout Plain Layout

	List<String> stringList = new ArrayList<String>();
\end_layout

\begin_layout Plain Layout

	stringList.append("new string here");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Parametric polymorphism.
 Generics.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
parampoly
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
abstractclass{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

class Engine {
\end_layout

\begin_layout Plain Layout

  //  engine properties omitted
\end_layout

\begin_layout Plain Layout

  public void start() {};
\end_layout

\begin_layout Plain Layout

  public void go() {};
\end_layout

\begin_layout Plain Layout

  public void stop() {};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

abstract class Vehicle {
\end_layout

\begin_layout Plain Layout

  protected final Engine;
\end_layout

\begin_layout Plain Layout

  protected Vehicle(Engine engine) { this.engine = engine; }
\end_layout

\begin_layout Plain Layout

  public abstract void move();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Truck extends Vehicle {
\end_layout

\begin_layout Plain Layout

  private final int capacity;
\end_layout

\begin_layout Plain Layout

  public Vehicle(Engine engine, int capacity) {
\end_layout

\begin_layout Plain Layout

    super(engine);
\end_layout

\begin_layout Plain Layout

    this.capacity = capacity;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  public void move() { 
\end_layout

\begin_layout Plain Layout

    engine.start();
\end_layout

\begin_layout Plain Layout

    engine.go();
\end_layout

\begin_layout Plain Layout

    engine.stop();
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Abstract class definition.
 Purpose.
 Is-a versus Has-a.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abstractclass
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
interfaces{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

class Engine {  ...
 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

interface Movable {
\end_layout

\begin_layout Plain Layout

  void move();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

abstract class Vehicle {
\end_layout

\begin_layout Plain Layout

  protected final Engine;
\end_layout

\begin_layout Plain Layout

  protected Vehicle(Engine engine) { this.engine = engine; }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Truck extends Vehicle implements Moveable {
\end_layout

\begin_layout Plain Layout

 public Vehicle(Engine engine) {
\end_layout

\begin_layout Plain Layout

    super(engine);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  public void move() { 
\end_layout

\begin_layout Plain Layout

    engine.start();
\end_layout

\begin_layout Plain Layout

    engine.go();
\end_layout

\begin_layout Plain Layout

    engine.stop();
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Interface definition.
 Contracts.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
interfaces
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
multiinherit{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[basicstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

class Engine {  ...
 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

interface Movable {
\end_layout

\begin_layout Plain Layout

  void move();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

interface Unloadable {
\end_layout

\begin_layout Plain Layout

  void unload();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

abstract class Vehicle {  ...
 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Truck extends Vehicle implements Moveable, Unloadable {
\end_layout

\begin_layout Plain Layout

  private final Unloadable trunk;
\end_layout

\begin_layout Plain Layout

  public Vehicle(Engine engine, Unloadable trunk) {
\end_layout

\begin_layout Plain Layout

    super(engine);
\end_layout

\begin_layout Plain Layout

    this.trunk = trunk;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  public void move() { ...
 }
\end_layout

\begin_layout Plain Layout

  public void unload() { 
\end_layout

\begin_layout Plain Layout

    trunk.unload(); 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Multiple inheritance - safe way.
 Diamond problem.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
multiinherit
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Design Patterns}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Program to interfaces - not implementations.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Prefer composition over inheritance.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

Open-close principle.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Creational patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Builder}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename BuilderPatternUMLDiagram.png
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Creational patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Factory method}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename factory-method-uml.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Creational patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Singleton}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename singleton.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Behavioral patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Command}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename Command.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Behavioral patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Iterator}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename iterator.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Thinking in Object-Oriented way
\end_layout

\begin_layout FrameSubtitle
Types of design patterns :: Behavioral patterns.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Strategy}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename strategy.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTTP Protocol.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Request / response model}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename Request_Response.gif
	width 80text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTTP Protocol.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Stateless}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename HTTPtransfer2.gif
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
httprequest{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
tiny,
\end_layout

\begin_layout Plain Layout

	morekeywords={GET,Host,User-Agent,Accept,Accept-Language,Accept-Encoding,Connec
tion,Referer,Cookie,Pragma,Cache-Control}
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

GET /links/widgets/zoneit.js HTTP/1.1 
\end_layout

\begin_layout Plain Layout

Host: widgets.dzone.com 
\end_layout

\begin_layout Plain Layout

User-Agent: Mozilla/5.0 (X11; FreeBSD amd64; rv:10.0.2) Gecko/20100101 Firefox/10.0.2
 
\end_layout

\begin_layout Plain Layout

Accept: */* 
\end_layout

\begin_layout Plain Layout

Accept-Language: en-us,en;q=0.5 
\end_layout

\begin_layout Plain Layout

Accept-Encoding: gzip, deflate 
\end_layout

\begin_layout Plain Layout

Connection: keep-alive 
\end_layout

\begin_layout Plain Layout

Referer: http://java.dzone.com/ 
\end_layout

\begin_layout Plain Layout

Cookie: __qca=1194188492-91087860-55883650
\end_layout

\begin_layout Plain Layout

Pragma: no-cache 
\end_layout

\begin_layout Plain Layout

Cache-Control: no-cache 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTTP Protocol.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Request headers}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
httprequest
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
httpresponse{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
tiny,
\end_layout

\begin_layout Plain Layout

	morekeywords={Date,Server,X-Powered-By,Last-Modified,ETag,Expires,Cache-Control
,Content-Encoding,Vary,Keep-Alive,Connection,Transfer-Encoding,Content-Type,
 charset}
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

HTTP/1.1 200 OK 
\end_layout

\begin_layout Plain Layout

Date: Tue, 13 Mar 2012 13:36:28 GMT 
\end_layout

\begin_layout Plain Layout

Server: Apache/2.2.11 (Unix) DAV/2 SVN/1.5.5 Resin/4.0.4 PHP/5.2.13 
\end_layout

\begin_layout Plain Layout

X-Powered-By: PHP/5.2.13 
\end_layout

\begin_layout Plain Layout

Last-Modified: Tue, 13 Mar 2012 13:34:54 GMT 
\end_layout

\begin_layout Plain Layout

ETag: "416b0bcb5a020fbeaeae5d0c6cb68d87" 
\end_layout

\begin_layout Plain Layout

Expires: Sun, 19 Nov 1978 05:00:00 GMT 
\end_layout

\begin_layout Plain Layout

Cache-Control: must-revalidate 
\end_layout

\begin_layout Plain Layout

Content-Encoding: gzip 
\end_layout

\begin_layout Plain Layout

Vary: User-Agent 
\end_layout

\begin_layout Plain Layout

Keep-Alive: timeout=15, max=500 
\end_layout

\begin_layout Plain Layout

Connection: Keep-Alive 
\end_layout

\begin_layout Plain Layout

Transfer-Encoding: chunked 
\end_layout

\begin_layout Plain Layout

Content-Type: text/html; 
\end_layout

\begin_layout Plain Layout

charset=utf-8 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTTP Protocol.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Response headers}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
httpresponse
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
htmloverview{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=HTML,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
tiny,
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

<html>
\end_layout

\begin_layout Plain Layout

<head>
\end_layout

\begin_layout Plain Layout

    <title>Page Title</title>
\end_layout

\begin_layout Plain Layout

    <link href="style.css" type="text/css" rel="stylesheet" media="screen"
 />
\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

    <div id="header">
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

    <div id="navigation">
\end_layout

\begin_layout Plain Layout

        <a href="index.html">Home</a> | <a href="about.html">About</a> | 
\end_layout

\begin_layout Plain Layout

		<a href="contact.html">Contact</a>
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

    <div id="left-sidebar">
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

    <div id="content-area">
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

    <div id="right-sidebar">
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

    <div id="footer">
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

</html>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTML.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{HTML overview}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename html-overview.jpg
	width 65text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
HTML.
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{HTML example}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
htmloverview
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
ddl{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=SQL,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
small
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

CREATE TABLE customer (
\end_layout

\begin_layout Plain Layout

  customer_id int primary key auto_increment,
\end_layout

\begin_layout Plain Layout

  firstname varchar(255) not null,
\end_layout

\begin_layout Plain Layout

  lastname varchar(255) not null,
\end_layout

\begin_layout Plain Layout

  email varchar(100) not null,
\end_layout

\begin_layout Plain Layout

  gender char(1) null
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
Databases.
 Data Definition Language (DDL)
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Tables}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ddl
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
ddlindex{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=SQL,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
small
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

create index customer_gender on customer(gender);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
ddluniqueindex{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=SQL,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
small
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

create unique index customer_firstname_lastname 
\end_layout

\begin_layout Plain Layout

	on customer(firstname,lastname);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
Databases.
 Data Definition Language (DDL)
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Indexes.
 Unique indexes.
 Primary keys.}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Indexes.
 Hash and B-Tree indexes.
 Purpose.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ddlindex
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Unique indexes
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ddluniqueindex
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
JDBC.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{JDBC Overview}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename JDBC.jpg
	width 50text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
defverbatim[colored]
\backslash
jdbcexample{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[
\end_layout

\begin_layout Plain Layout

	language=JAVA,
\end_layout

\begin_layout Plain Layout

	basicstyle=
\backslash
tiny
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

interface CustomerEnumerator {
\end_layout

\begin_layout Plain Layout

  List<Customer> enumerate(String firstName) throws EnumerateCustomerException;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

class JDBCCustomerEnumerator implements CustomerEnumerator {
\end_layout

\begin_layout Plain Layout

  public List<Customer> enumerate(String firstName) {
\end_layout

\begin_layout Plain Layout

    Class.forName("com.mysql.jdbc.Driver").newInstance();
\end_layout

\begin_layout Plain Layout

    Connection dbh = null; PreparedStatement psth = null; ResultSet res
 = null;
\end_layout

\begin_layout Plain Layout

    try {
\end_layout

\begin_layout Plain Layout

      DriverManager.
\end_layout

\begin_layout Plain Layout

        getConnection("jdbc:mysql://localhost:3306/customers","dbUser","c00lpwd"
);
\end_layout

\begin_layout Plain Layout

      PreparedStatement psth = dbh.prepareStatement("select firstname,lastname,ge
nder 
\end_layout

\begin_layout Plain Layout

        from customers where firstname=?");
\end_layout

\begin_layout Plain Layout

      psth.setString(1,firstName);
\end_layout

\begin_layout Plain Layout

      ResultSet res = psth.executeQuery();
\end_layout

\begin_layout Plain Layout

      List<Customer> customers = new ArrayList<Customer>(100);
\end_layout

\begin_layout Plain Layout

      while (res.hasNext()) {
\end_layout

\begin_layout Plain Layout

        customers.add(new Customer(res.getString(1),res.getString(2),res.getString(3
));
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      return customers;
\end_layout

\begin_layout Plain Layout

    } catch (SQLException e) { throw new EnumerateCustomerException(e);}
 
\end_layout

\begin_layout Plain Layout

      finally { DbUtils.closeQuietly(dbh, psth, res);}
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
JDBC.
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example connecting to database and fetching results}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
jdbcexample
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
Servlets and Java Server Pages.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Java Servlets}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

javax.servlet.http.HttpServlet
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

javax.servlet.http.HttpServletRequest and javax.servlet.http.HttpServletResponse
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

Sessions.
 Customer identification.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

web.xml definition.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
Servlets and Java Server Pages.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Java Server Pages}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

JSP Model 1 and JSP Model 2.
 Scriplets, JSTL and Expression Langiage.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Model/View/Controller.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

Entry point.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

Request forwarding and including.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Java and WEB applications.
\end_layout

\begin_layout FrameSubtitle
Servlet Containers.
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Servlet containers}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Apache Tomcat
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Jetty
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Software engineering
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Real life development}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Metodologies (Waterfall, Agile, RUP, XP)
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

Outsourcing.
 Bodyshops.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

Freelancing.
 Scriptlance, Elance, Odesk, Rentacoder.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

Shareware.
 Software directories.
 Digital river.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Suggested readings
\end_layout

\begin_layout Itemize

\series bold
Steve McConnell.

\series default
 Code Complete: A Practical Handbook of Software Construction.
 
\series bold
ISBN-10: 0735619670.
\end_layout

\begin_layout Itemize

\series bold
Joshua Bloch.
 
\series default
Effective Java.
 
\series bold
ISBN-10: 0321356683.
\end_layout

\begin_layout Itemize

\series bold
Bruce Eckel.
 
\series default
Thinking in Java.
 
\series bold
ISBN-10: 0131872486.
\end_layout

\begin_layout Itemize

\series bold
Kathy Sierra.

\series default
 Head First Java.
 
\series bold
ISBN-10: 0596009208.
\end_layout

\begin_layout Itemize

\series bold
Elisabeth Freeman.

\series default
 Head First Design Patterns.
 
\series bold
ISBN-10: 0596007124.
\end_layout

\begin_layout Itemize

\series bold
Martin Fowler.

\series default
 Refactoring: Improving the Design of Existing Code.
 
\series bold
ISBN-10: 0201485672.
\end_layout

\begin_layout Itemize

\series bold
Craig Larman.

\series default
 Applying UML and Patterns: An Introduction to Object-Oriented Analysis
 and Design and Iterative Development.
 
\series bold
ISBN-10: 0131489062.
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
